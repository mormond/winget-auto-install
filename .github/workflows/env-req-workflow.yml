name: Environment Creation Workflow
on:
  issues:
    types: [labeled]

jobs:
  parse:
    name: "Parse GitHub Issue"
    runs-on: ubuntu-latest
    outputs:
      appname: ${{steps.parser.outputs.appName}}
      template: ${{steps.parser.outputs.template}}
      approved: ${{steps.parser.outputs.approved}}
      ready: ${{steps.parser.outputs.ready}}
    steps:
      - uses: actions/checkout@v2

      - name: 'Build GitHub Action'
        working-directory: .github/actions/env-req-parser
        run: |
          npm ci
          npm run build

      - uses: ./.github/actions/env-req-parser
        id: parser
        with:
          templatePath: ./infrastructure/templates.json

  test:
    name: "Check Parse Outputs"
    runs-on: ubuntu-latest
    needs: parse
    steps:
      - name: 'Ouputs'
        run: |
          echo 'appName is: ${{ needs.parse.outputs.appName }}
          echo 'template is: ${{ needs.parse.outputs.template }}'
          echo 'approved is: ${{ needs.parse.outputs.approved }}'
          echo 'ready is: ${{ needs.parse.outputs.ready }}'

  plan:
    if: needs.parse.outputs.approved == 'true'
    name: "Plan Infrastructure"
    runs-on: ubuntu-latest
    needs: parse

    defaults:
      run:
        working-directory: infrastructure/${{ needs.parse.outputs.template }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Setup Credentials'
        run: |
          ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          echo "::add-mask::$ARM_SUBSCRIPTION_ID"
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> $GITHUB_ENV
          ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
          echo "::add-mask::$ARM_CLIENT_ID"
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID" >> $GITHUB_ENV
          ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')
          echo "::add-mask::$ARM_CLIENT_SECRET"
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET" >> $GITHUB_ENV
          ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
          echo "::add-mask::$ARM_TENANT_ID"
          echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> $GITHUB_ENV

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var resource_group_name="$RESOURCE_GROUP" -out "$GITHUB_WORKSPACE/issue-$ISSUE_NUMBER.plan"
        continue-on-error: true
        env:
          RESOURCE_GROUP: ${{ needs.parse.outputs.appname }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Upload Plan Artifact
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: issue-${{ github.event.issue.number }}.plan
          path: ${{ github.workspace }}/issue-${{ github.event.issue.number }}.plan

      - name: 'Add Comment to Issue'
        uses: actions/github-script@v4
        env:
          VALIDATION: "terraform validate -no-color\n\n${{ steps.validate.outputs.stdout }}\n${{ steps.validate.outputs.stderr }}"
          PLAN: "terraform plan -no-color\n\n${{ steps.plan.outputs.stdout }}\n${{ steps.plan.outputs.stderr }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Show Validation</summary>
            
            \`\`\`\n
            ${process.env.VALIDATION}
            \`\`\`
            
            </details>
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Approver: @${{ github.actor }}, App Name: \`${{ needs.parse.outputs.appname }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy:
    if: needs.parse.outputs.ready == 'true'
    name: "Deploy Infrastructure"
    runs-on: ubuntu-latest
    needs: parse

    defaults:
      run:
        working-directory: infrastructure/${{ needs.parse.outputs.template }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Setup Credentials'
        run: |
          ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          echo "::add-mask::$ARM_SUBSCRIPTION_ID"
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> $GITHUB_ENV
          ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
          echo "::add-mask::$ARM_CLIENT_ID"
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID" >> $GITHUB_ENV
          ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')
          echo "::add-mask::$ARM_CLIENT_SECRET"
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET" >> $GITHUB_ENV
          ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
          echo "::add-mask::$ARM_TENANT_ID"
          echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> $GITHUB_ENV

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Download Plan Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: env-req-workflow.yml
          path: ${{ github.workspace }}
          name: issue-${{ github.event.issue.number }}.plan

      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -auto-approve ${{ github.workspace }}/issue-${{ github.event.issue.number }}.plan
        continue-on-error: true
        
      - name: 'Add Comment to Issue'
        uses: actions/github-script@v4
        env:
          APPLY: "terraform apply -no-color -auto-approve ${{ github.workspace }}/issue-${{ github.event.issue.number }}.plan\n\n${{ steps.apply.outputs.stdout }}\n${{ steps.apply.outputs.stderr }}"
        with:
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            
            <details><summary>Show Apply</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            *Approver: @${{ github.actor }}, App Name: \`${{ needs.parse.outputs.appname }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Status
        if: steps.apply.outcome == 'failure'
        run: exit 1

